// Generated by CoffeeScript 1.9.3

/*
Что делает:
 - отвечает за поиск файлов версий в пределах одного продукта

Как делает:
 - проходит по указанной директории
 - ищет файлы с именованием по маске semver 
 - компанует из них объект вида `чистое название -> имя файла`
 */

(function() {
  var VersionSearcher, _, async, fs, path, semver,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('lodash');

  async = require('async');

  fs = require('fs');

  path = require('path');

  semver = require('semver');

  module.exports = VersionSearcher = (function() {
    function VersionSearcher(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      this._nonSemverFilenameFinded = bind(this._nonSemverFilenameFinded, this);
      this._filterSemverFilesOnly = bind(this._filterSemverFilesOnly, this);
      this._filterFilesOnly = bind(this._filterFilesOnly, this);
      this._proceedDirectory = bind(this._proceedDirectory, this);
      this.proceedDirectory = bind(this.proceedDirectory, this);
      this._logger_ = (ref = options.logger) != null ? ref : console;
      this._is_strict_ = (ref1 = options.strict) != null ? ref1 : false;
      this._semver_loose_mode = (ref2 = options.strict) != null ? ref2 : true;
    }


    /*
    Процессим директорию и получаем только валидные имена
    @return {Object}
     */

    VersionSearcher.prototype.proceedDirectory = function(dir, main_cb) {
      return this._proceedDirectory(dir, main_cb);
    };


    /*  
          ******  ******  *** *     *    *    ******* ******* 
          *     * *     *  *  *     *   * *      *    *       
          *     * *     *  *  *     *  *   *     *    *       
          ******  ******   *  *     * *     *    *    *****   
          *       *   *    *   *   *  *******    *    *       
          *       *    *   *    * *   *     *    *    *       
          *       *     * ***    *    *     *    *    *******
     */


    /*
    Запускает процесс обработки директории
     */

    VersionSearcher.prototype._proceedDirectory = function(dir, cb) {
      return fs.readdir(dir, (function(_this) {
        return function(err, names) {
          var non_dot_started_files;
          if (err != null) {
            return cb(err);
          }
          non_dot_started_files = _this._wipeDotStartedFiles(names);
          return _this._filterFilesOnly(dir, non_dot_started_files, function(files_only) {
            var semversed_files;
            try {
              semversed_files = _this._filterSemverFilesOnly(dir, files_only);
            } catch (_error) {
              err = _error;
              return cb(err);
            }
            return cb(null, semversed_files);
          });
        };
      })(this));
    };


    /*
    Фильтр, вернет только файлы 
    нам не нужны под-директории и т.п.
     */

    VersionSearcher.prototype._filterFilesOnly = function(dir, files, cb) {
      var filter_fn;
      filter_fn = function(filename, a_cb) {
        return fs.stat(path.join(dir, filename), function(err, stats) {
          return a_cb(err != null ? false : stats.isFile());
        });
      };
      return async.filter(files, filter_fn, cb);
    };


    /*
    фильтр уберет все файлы, начинающиеся с точки
     */

    VersionSearcher.prototype._wipeDotStartedFiles = function(files) {
      return _.reject(files, function(name) {
        return '.' === name.charAt(0);
      });
    };


    /*
    Фильтруем только то, что валидно для semver v2.0.0
    все равно не понятно что делать с теми, кто не может быть им обработан
     */

    VersionSearcher.prototype._filterSemverFilesOnly = function(dir, files) {
      var cleaned, i, len, name, result;
      result = {};
      for (i = 0, len = files.length; i < len; i++) {
        name = files[i];
        if (!(cleaned = semver.clean(this._wipeFileExtension(name), this._semver_loose_mode))) {
          this._nonSemverFilenameFinded(dir, name);
          continue;
        }
        result[cleaned] = name;
        null;
      }
      return result;
    };


    /*
    Убираем расширения файлов из их названия
     */

    VersionSearcher.prototype._wipeFileExtension = function(filename) {
      return filename && path.basename(filename, path.extname(filename));
    };


    /*
    Обрабатываем ситуацию когда у нас оказывается найден файл не являющийся версионным
     */

    VersionSearcher.prototype._nonSemverFilenameFinded = function(dir, filename) {
      var base, error_text;
      error_text = "non-semver filename |" + (path.join(dir, filename)) + "|";
      if (this._is_strict_) {
        throw Error(error_text);
      } else {
        return typeof (base = this._logger_).warn === "function" ? base.warn("WARN: " + error_text) : void 0;
      }
    };

    return VersionSearcher;

  })();

}).call(this);
